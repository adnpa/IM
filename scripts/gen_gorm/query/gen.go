// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q           = new(Query)
	FriendApply *friendApply
	Friendship  *friendship
	Group       *group
	GroupApply  *groupApply
	GroupMember *groupMember
	User        *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	FriendApply = &Q.FriendApply
	Friendship = &Q.Friendship
	Group = &Q.Group
	GroupApply = &Q.GroupApply
	GroupMember = &Q.GroupMember
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:          db,
		FriendApply: newFriendApply(db, opts...),
		Friendship:  newFriendship(db, opts...),
		Group:       newGroup(db, opts...),
		GroupApply:  newGroupApply(db, opts...),
		GroupMember: newGroupMember(db, opts...),
		User:        newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	FriendApply friendApply
	Friendship  friendship
	Group       group
	GroupApply  groupApply
	GroupMember groupMember
	User        user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:          db,
		FriendApply: q.FriendApply.clone(db),
		Friendship:  q.Friendship.clone(db),
		Group:       q.Group.clone(db),
		GroupApply:  q.GroupApply.clone(db),
		GroupMember: q.GroupMember.clone(db),
		User:        q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:          db,
		FriendApply: q.FriendApply.replaceDB(db),
		Friendship:  q.Friendship.replaceDB(db),
		Group:       q.Group.replaceDB(db),
		GroupApply:  q.GroupApply.replaceDB(db),
		GroupMember: q.GroupMember.replaceDB(db),
		User:        q.User.replaceDB(db),
	}
}

type queryCtx struct {
	FriendApply IFriendApplyDo
	Friendship  IFriendshipDo
	Group       IGroupDo
	GroupApply  IGroupApplyDo
	GroupMember IGroupMemberDo
	User        IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		FriendApply: q.FriendApply.WithContext(ctx),
		Friendship:  q.Friendship.WithContext(ctx),
		Group:       q.Group.WithContext(ctx),
		GroupApply:  q.GroupApply.WithContext(ctx),
		GroupMember: q.GroupMember.WithContext(ctx),
		User:        q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
