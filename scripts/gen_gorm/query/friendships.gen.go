// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/adnpa/IM/scripts/gen_gorm/model"
)

func newFriendship(db *gorm.DB, opts ...gen.DOOption) friendship {
	_friendship := friendship{}

	_friendship.friendshipDo.UseDB(db, opts...)
	_friendship.friendshipDo.UseModel(&model.Friendship{})

	tableName := _friendship.friendshipDo.TableName()
	_friendship.ALL = field.NewAsterisk(tableName)
	_friendship.UserID = field.NewInt32(tableName, "user_id")
	_friendship.FriendID = field.NewInt32(tableName, "friend_id")
	_friendship.Comment = field.NewString(tableName, "comment")
	_friendship.CreatedAt = field.NewTime(tableName, "created_at")
	_friendship.UpdatedAt = field.NewTime(tableName, "updated_at")
	_friendship.DeletedAt = field.NewField(tableName, "deleted_at")

	_friendship.fillFieldMap()

	return _friendship
}

// friendship 好友关系表
type friendship struct {
	friendshipDo

	ALL       field.Asterisk
	UserID    field.Int32  // 用户ID
	FriendID  field.Int32  // 好友ID
	Comment   field.String // 备注
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	DeletedAt field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (f friendship) Table(newTableName string) *friendship {
	f.friendshipDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f friendship) As(alias string) *friendship {
	f.friendshipDo.DO = *(f.friendshipDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *friendship) updateTableName(table string) *friendship {
	f.ALL = field.NewAsterisk(table)
	f.UserID = field.NewInt32(table, "user_id")
	f.FriendID = field.NewInt32(table, "friend_id")
	f.Comment = field.NewString(table, "comment")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")
	f.DeletedAt = field.NewField(table, "deleted_at")

	f.fillFieldMap()

	return f
}

func (f *friendship) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *friendship) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 6)
	f.fieldMap["user_id"] = f.UserID
	f.fieldMap["friend_id"] = f.FriendID
	f.fieldMap["comment"] = f.Comment
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["deleted_at"] = f.DeletedAt
}

func (f friendship) clone(db *gorm.DB) friendship {
	f.friendshipDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f friendship) replaceDB(db *gorm.DB) friendship {
	f.friendshipDo.ReplaceDB(db)
	return f
}

type friendshipDo struct{ gen.DO }

type IFriendshipDo interface {
	gen.SubQuery
	Debug() IFriendshipDo
	WithContext(ctx context.Context) IFriendshipDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFriendshipDo
	WriteDB() IFriendshipDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFriendshipDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFriendshipDo
	Not(conds ...gen.Condition) IFriendshipDo
	Or(conds ...gen.Condition) IFriendshipDo
	Select(conds ...field.Expr) IFriendshipDo
	Where(conds ...gen.Condition) IFriendshipDo
	Order(conds ...field.Expr) IFriendshipDo
	Distinct(cols ...field.Expr) IFriendshipDo
	Omit(cols ...field.Expr) IFriendshipDo
	Join(table schema.Tabler, on ...field.Expr) IFriendshipDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFriendshipDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFriendshipDo
	Group(cols ...field.Expr) IFriendshipDo
	Having(conds ...gen.Condition) IFriendshipDo
	Limit(limit int) IFriendshipDo
	Offset(offset int) IFriendshipDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFriendshipDo
	Unscoped() IFriendshipDo
	Create(values ...*model.Friendship) error
	CreateInBatches(values []*model.Friendship, batchSize int) error
	Save(values ...*model.Friendship) error
	First() (*model.Friendship, error)
	Take() (*model.Friendship, error)
	Last() (*model.Friendship, error)
	Find() ([]*model.Friendship, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Friendship, err error)
	FindInBatches(result *[]*model.Friendship, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Friendship) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFriendshipDo
	Assign(attrs ...field.AssignExpr) IFriendshipDo
	Joins(fields ...field.RelationField) IFriendshipDo
	Preload(fields ...field.RelationField) IFriendshipDo
	FirstOrInit() (*model.Friendship, error)
	FirstOrCreate() (*model.Friendship, error)
	FindByPage(offset int, limit int) (result []*model.Friendship, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFriendshipDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f friendshipDo) Debug() IFriendshipDo {
	return f.withDO(f.DO.Debug())
}

func (f friendshipDo) WithContext(ctx context.Context) IFriendshipDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f friendshipDo) ReadDB() IFriendshipDo {
	return f.Clauses(dbresolver.Read)
}

func (f friendshipDo) WriteDB() IFriendshipDo {
	return f.Clauses(dbresolver.Write)
}

func (f friendshipDo) Session(config *gorm.Session) IFriendshipDo {
	return f.withDO(f.DO.Session(config))
}

func (f friendshipDo) Clauses(conds ...clause.Expression) IFriendshipDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f friendshipDo) Returning(value interface{}, columns ...string) IFriendshipDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f friendshipDo) Not(conds ...gen.Condition) IFriendshipDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f friendshipDo) Or(conds ...gen.Condition) IFriendshipDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f friendshipDo) Select(conds ...field.Expr) IFriendshipDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f friendshipDo) Where(conds ...gen.Condition) IFriendshipDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f friendshipDo) Order(conds ...field.Expr) IFriendshipDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f friendshipDo) Distinct(cols ...field.Expr) IFriendshipDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f friendshipDo) Omit(cols ...field.Expr) IFriendshipDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f friendshipDo) Join(table schema.Tabler, on ...field.Expr) IFriendshipDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f friendshipDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFriendshipDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f friendshipDo) RightJoin(table schema.Tabler, on ...field.Expr) IFriendshipDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f friendshipDo) Group(cols ...field.Expr) IFriendshipDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f friendshipDo) Having(conds ...gen.Condition) IFriendshipDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f friendshipDo) Limit(limit int) IFriendshipDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f friendshipDo) Offset(offset int) IFriendshipDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f friendshipDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFriendshipDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f friendshipDo) Unscoped() IFriendshipDo {
	return f.withDO(f.DO.Unscoped())
}

func (f friendshipDo) Create(values ...*model.Friendship) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f friendshipDo) CreateInBatches(values []*model.Friendship, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f friendshipDo) Save(values ...*model.Friendship) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f friendshipDo) First() (*model.Friendship, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Friendship), nil
	}
}

func (f friendshipDo) Take() (*model.Friendship, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Friendship), nil
	}
}

func (f friendshipDo) Last() (*model.Friendship, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Friendship), nil
	}
}

func (f friendshipDo) Find() ([]*model.Friendship, error) {
	result, err := f.DO.Find()
	return result.([]*model.Friendship), err
}

func (f friendshipDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Friendship, err error) {
	buf := make([]*model.Friendship, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f friendshipDo) FindInBatches(result *[]*model.Friendship, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f friendshipDo) Attrs(attrs ...field.AssignExpr) IFriendshipDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f friendshipDo) Assign(attrs ...field.AssignExpr) IFriendshipDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f friendshipDo) Joins(fields ...field.RelationField) IFriendshipDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f friendshipDo) Preload(fields ...field.RelationField) IFriendshipDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f friendshipDo) FirstOrInit() (*model.Friendship, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Friendship), nil
	}
}

func (f friendshipDo) FirstOrCreate() (*model.Friendship, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Friendship), nil
	}
}

func (f friendshipDo) FindByPage(offset int, limit int) (result []*model.Friendship, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f friendshipDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f friendshipDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f friendshipDo) Delete(models ...*model.Friendship) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *friendshipDo) withDO(do gen.Dao) *friendshipDo {
	f.DO = *do.(*gen.DO)
	return f
}
