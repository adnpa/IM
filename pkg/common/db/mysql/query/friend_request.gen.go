// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/adnpa/IM/model"
)

func newFriendRequest(db *gorm.DB, opts ...gen.DOOption) friendRequest {
	_friendRequest := friendRequest{}

	_friendRequest.friendRequestDo.UseDB(db, opts...)
	_friendRequest.friendRequestDo.UseModel(&model.FriendRequest{})

	tableName := _friendRequest.friendRequestDo.TableName()
	_friendRequest.ALL = field.NewAsterisk(tableName)
	_friendRequest.ReqID = field.NewString(tableName, "req_id")
	_friendRequest.UserID = field.NewString(tableName, "user_id")
	_friendRequest.Flag = field.NewInt32(tableName, "flag")
	_friendRequest.ReqMessage = field.NewString(tableName, "req_message")
	_friendRequest.CreateTime = field.NewTime(tableName, "create_time")

	_friendRequest.fillFieldMap()

	return _friendRequest
}

type friendRequest struct {
	friendRequestDo

	ALL        field.Asterisk
	ReqID      field.String
	UserID     field.String
	Flag       field.Int32
	ReqMessage field.String
	CreateTime field.Time

	fieldMap map[string]field.Expr
}

func (f friendRequest) Table(newTableName string) *friendRequest {
	f.friendRequestDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f friendRequest) As(alias string) *friendRequest {
	f.friendRequestDo.DO = *(f.friendRequestDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *friendRequest) updateTableName(table string) *friendRequest {
	f.ALL = field.NewAsterisk(table)
	f.ReqID = field.NewString(table, "req_id")
	f.UserID = field.NewString(table, "user_id")
	f.Flag = field.NewInt32(table, "flag")
	f.ReqMessage = field.NewString(table, "req_message")
	f.CreateTime = field.NewTime(table, "create_time")

	f.fillFieldMap()

	return f
}

func (f *friendRequest) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *friendRequest) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 5)
	f.fieldMap["req_id"] = f.ReqID
	f.fieldMap["user_id"] = f.UserID
	f.fieldMap["flag"] = f.Flag
	f.fieldMap["req_message"] = f.ReqMessage
	f.fieldMap["create_time"] = f.CreateTime
}

func (f friendRequest) clone(db *gorm.DB) friendRequest {
	f.friendRequestDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f friendRequest) replaceDB(db *gorm.DB) friendRequest {
	f.friendRequestDo.ReplaceDB(db)
	return f
}

type friendRequestDo struct{ gen.DO }

type IFriendRequestDo interface {
	gen.SubQuery
	Debug() IFriendRequestDo
	WithContext(ctx context.Context) IFriendRequestDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFriendRequestDo
	WriteDB() IFriendRequestDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFriendRequestDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFriendRequestDo
	Not(conds ...gen.Condition) IFriendRequestDo
	Or(conds ...gen.Condition) IFriendRequestDo
	Select(conds ...field.Expr) IFriendRequestDo
	Where(conds ...gen.Condition) IFriendRequestDo
	Order(conds ...field.Expr) IFriendRequestDo
	Distinct(cols ...field.Expr) IFriendRequestDo
	Omit(cols ...field.Expr) IFriendRequestDo
	Join(table schema.Tabler, on ...field.Expr) IFriendRequestDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFriendRequestDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFriendRequestDo
	Group(cols ...field.Expr) IFriendRequestDo
	Having(conds ...gen.Condition) IFriendRequestDo
	Limit(limit int) IFriendRequestDo
	Offset(offset int) IFriendRequestDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFriendRequestDo
	Unscoped() IFriendRequestDo
	Create(values ...*model.FriendRequest) error
	CreateInBatches(values []*model.FriendRequest, batchSize int) error
	Save(values ...*model.FriendRequest) error
	First() (*model.FriendRequest, error)
	Take() (*model.FriendRequest, error)
	Last() (*model.FriendRequest, error)
	Find() ([]*model.FriendRequest, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FriendRequest, err error)
	FindInBatches(result *[]*model.FriendRequest, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FriendRequest) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFriendRequestDo
	Assign(attrs ...field.AssignExpr) IFriendRequestDo
	Joins(fields ...field.RelationField) IFriendRequestDo
	Preload(fields ...field.RelationField) IFriendRequestDo
	FirstOrInit() (*model.FriendRequest, error)
	FirstOrCreate() (*model.FriendRequest, error)
	FindByPage(offset int, limit int) (result []*model.FriendRequest, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFriendRequestDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f friendRequestDo) Debug() IFriendRequestDo {
	return f.withDO(f.DO.Debug())
}

func (f friendRequestDo) WithContext(ctx context.Context) IFriendRequestDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f friendRequestDo) ReadDB() IFriendRequestDo {
	return f.Clauses(dbresolver.Read)
}

func (f friendRequestDo) WriteDB() IFriendRequestDo {
	return f.Clauses(dbresolver.Write)
}

func (f friendRequestDo) Session(config *gorm.Session) IFriendRequestDo {
	return f.withDO(f.DO.Session(config))
}

func (f friendRequestDo) Clauses(conds ...clause.Expression) IFriendRequestDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f friendRequestDo) Returning(value interface{}, columns ...string) IFriendRequestDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f friendRequestDo) Not(conds ...gen.Condition) IFriendRequestDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f friendRequestDo) Or(conds ...gen.Condition) IFriendRequestDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f friendRequestDo) Select(conds ...field.Expr) IFriendRequestDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f friendRequestDo) Where(conds ...gen.Condition) IFriendRequestDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f friendRequestDo) Order(conds ...field.Expr) IFriendRequestDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f friendRequestDo) Distinct(cols ...field.Expr) IFriendRequestDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f friendRequestDo) Omit(cols ...field.Expr) IFriendRequestDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f friendRequestDo) Join(table schema.Tabler, on ...field.Expr) IFriendRequestDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f friendRequestDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFriendRequestDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f friendRequestDo) RightJoin(table schema.Tabler, on ...field.Expr) IFriendRequestDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f friendRequestDo) Group(cols ...field.Expr) IFriendRequestDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f friendRequestDo) Having(conds ...gen.Condition) IFriendRequestDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f friendRequestDo) Limit(limit int) IFriendRequestDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f friendRequestDo) Offset(offset int) IFriendRequestDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f friendRequestDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFriendRequestDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f friendRequestDo) Unscoped() IFriendRequestDo {
	return f.withDO(f.DO.Unscoped())
}

func (f friendRequestDo) Create(values ...*model.FriendRequest) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f friendRequestDo) CreateInBatches(values []*model.FriendRequest, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f friendRequestDo) Save(values ...*model.FriendRequest) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f friendRequestDo) First() (*model.FriendRequest, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FriendRequest), nil
	}
}

func (f friendRequestDo) Take() (*model.FriendRequest, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FriendRequest), nil
	}
}

func (f friendRequestDo) Last() (*model.FriendRequest, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FriendRequest), nil
	}
}

func (f friendRequestDo) Find() ([]*model.FriendRequest, error) {
	result, err := f.DO.Find()
	return result.([]*model.FriendRequest), err
}

func (f friendRequestDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FriendRequest, err error) {
	buf := make([]*model.FriendRequest, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f friendRequestDo) FindInBatches(result *[]*model.FriendRequest, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f friendRequestDo) Attrs(attrs ...field.AssignExpr) IFriendRequestDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f friendRequestDo) Assign(attrs ...field.AssignExpr) IFriendRequestDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f friendRequestDo) Joins(fields ...field.RelationField) IFriendRequestDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f friendRequestDo) Preload(fields ...field.RelationField) IFriendRequestDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f friendRequestDo) FirstOrInit() (*model.FriendRequest, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FriendRequest), nil
	}
}

func (f friendRequestDo) FirstOrCreate() (*model.FriendRequest, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FriendRequest), nil
	}
}

func (f friendRequestDo) FindByPage(offset int, limit int) (result []*model.FriendRequest, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f friendRequestDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f friendRequestDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f friendRequestDo) Delete(models ...*model.FriendRequest) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *friendRequestDo) withDO(do gen.Dao) *friendRequestDo {
	f.DO = *do.(*gen.DO)
	return f
}
