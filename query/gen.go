// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q             = new(Query)
	ChatLog       *chatLog
	Friend        *friend
	FriendRequest *friendRequest
	Group         *group
	GroupMember   *groupMember
	GroupRequest  *groupRequest
	Register      *register
	User          *user
	UserBlackList *userBlackList
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	ChatLog = &Q.ChatLog
	Friend = &Q.Friend
	FriendRequest = &Q.FriendRequest
	Group = &Q.Group
	GroupMember = &Q.GroupMember
	GroupRequest = &Q.GroupRequest
	Register = &Q.Register
	User = &Q.User
	UserBlackList = &Q.UserBlackList
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:            db,
		ChatLog:       newChatLog(db, opts...),
		Friend:        newFriend(db, opts...),
		FriendRequest: newFriendRequest(db, opts...),
		Group:         newGroup(db, opts...),
		GroupMember:   newGroupMember(db, opts...),
		GroupRequest:  newGroupRequest(db, opts...),
		Register:      newRegister(db, opts...),
		User:          newUser(db, opts...),
		UserBlackList: newUserBlackList(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	ChatLog       chatLog
	Friend        friend
	FriendRequest friendRequest
	Group         group
	GroupMember   groupMember
	GroupRequest  groupRequest
	Register      register
	User          user
	UserBlackList userBlackList
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		ChatLog:       q.ChatLog.clone(db),
		Friend:        q.Friend.clone(db),
		FriendRequest: q.FriendRequest.clone(db),
		Group:         q.Group.clone(db),
		GroupMember:   q.GroupMember.clone(db),
		GroupRequest:  q.GroupRequest.clone(db),
		Register:      q.Register.clone(db),
		User:          q.User.clone(db),
		UserBlackList: q.UserBlackList.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		ChatLog:       q.ChatLog.replaceDB(db),
		Friend:        q.Friend.replaceDB(db),
		FriendRequest: q.FriendRequest.replaceDB(db),
		Group:         q.Group.replaceDB(db),
		GroupMember:   q.GroupMember.replaceDB(db),
		GroupRequest:  q.GroupRequest.replaceDB(db),
		Register:      q.Register.replaceDB(db),
		User:          q.User.replaceDB(db),
		UserBlackList: q.UserBlackList.replaceDB(db),
	}
}

type queryCtx struct {
	ChatLog       IChatLogDo
	Friend        IFriendDo
	FriendRequest IFriendRequestDo
	Group         IGroupDo
	GroupMember   IGroupMemberDo
	GroupRequest  IGroupRequestDo
	Register      IRegisterDo
	User          IUserDo
	UserBlackList IUserBlackListDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		ChatLog:       q.ChatLog.WithContext(ctx),
		Friend:        q.Friend.WithContext(ctx),
		FriendRequest: q.FriendRequest.WithContext(ctx),
		Group:         q.Group.WithContext(ctx),
		GroupMember:   q.GroupMember.WithContext(ctx),
		GroupRequest:  q.GroupRequest.WithContext(ctx),
		Register:      q.Register.WithContext(ctx),
		User:          q.User.WithContext(ctx),
		UserBlackList: q.UserBlackList.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
