// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/adnpa/IM/model"
)

func newUserBlackList(db *gorm.DB, opts ...gen.DOOption) userBlackList {
	_userBlackList := userBlackList{}

	_userBlackList.userBlackListDo.UseDB(db, opts...)
	_userBlackList.userBlackListDo.UseModel(&model.UserBlackList{})

	tableName := _userBlackList.userBlackListDo.TableName()
	_userBlackList.ALL = field.NewAsterisk(tableName)
	_userBlackList.OwnerID = field.NewString(tableName, "owner_id")
	_userBlackList.BlockID = field.NewString(tableName, "block_id")
	_userBlackList.CreateTime = field.NewTime(tableName, "create_time")

	_userBlackList.fillFieldMap()

	return _userBlackList
}

type userBlackList struct {
	userBlackListDo

	ALL        field.Asterisk
	OwnerID    field.String
	BlockID    field.String
	CreateTime field.Time

	fieldMap map[string]field.Expr
}

func (u userBlackList) Table(newTableName string) *userBlackList {
	u.userBlackListDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userBlackList) As(alias string) *userBlackList {
	u.userBlackListDo.DO = *(u.userBlackListDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userBlackList) updateTableName(table string) *userBlackList {
	u.ALL = field.NewAsterisk(table)
	u.OwnerID = field.NewString(table, "owner_id")
	u.BlockID = field.NewString(table, "block_id")
	u.CreateTime = field.NewTime(table, "create_time")

	u.fillFieldMap()

	return u
}

func (u *userBlackList) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userBlackList) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 3)
	u.fieldMap["owner_id"] = u.OwnerID
	u.fieldMap["block_id"] = u.BlockID
	u.fieldMap["create_time"] = u.CreateTime
}

func (u userBlackList) clone(db *gorm.DB) userBlackList {
	u.userBlackListDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userBlackList) replaceDB(db *gorm.DB) userBlackList {
	u.userBlackListDo.ReplaceDB(db)
	return u
}

type userBlackListDo struct{ gen.DO }

type IUserBlackListDo interface {
	gen.SubQuery
	Debug() IUserBlackListDo
	WithContext(ctx context.Context) IUserBlackListDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserBlackListDo
	WriteDB() IUserBlackListDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserBlackListDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserBlackListDo
	Not(conds ...gen.Condition) IUserBlackListDo
	Or(conds ...gen.Condition) IUserBlackListDo
	Select(conds ...field.Expr) IUserBlackListDo
	Where(conds ...gen.Condition) IUserBlackListDo
	Order(conds ...field.Expr) IUserBlackListDo
	Distinct(cols ...field.Expr) IUserBlackListDo
	Omit(cols ...field.Expr) IUserBlackListDo
	Join(table schema.Tabler, on ...field.Expr) IUserBlackListDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserBlackListDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserBlackListDo
	Group(cols ...field.Expr) IUserBlackListDo
	Having(conds ...gen.Condition) IUserBlackListDo
	Limit(limit int) IUserBlackListDo
	Offset(offset int) IUserBlackListDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserBlackListDo
	Unscoped() IUserBlackListDo
	Create(values ...*model.UserBlackList) error
	CreateInBatches(values []*model.UserBlackList, batchSize int) error
	Save(values ...*model.UserBlackList) error
	First() (*model.UserBlackList, error)
	Take() (*model.UserBlackList, error)
	Last() (*model.UserBlackList, error)
	Find() ([]*model.UserBlackList, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserBlackList, err error)
	FindInBatches(result *[]*model.UserBlackList, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserBlackList) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserBlackListDo
	Assign(attrs ...field.AssignExpr) IUserBlackListDo
	Joins(fields ...field.RelationField) IUserBlackListDo
	Preload(fields ...field.RelationField) IUserBlackListDo
	FirstOrInit() (*model.UserBlackList, error)
	FirstOrCreate() (*model.UserBlackList, error)
	FindByPage(offset int, limit int) (result []*model.UserBlackList, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserBlackListDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userBlackListDo) Debug() IUserBlackListDo {
	return u.withDO(u.DO.Debug())
}

func (u userBlackListDo) WithContext(ctx context.Context) IUserBlackListDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userBlackListDo) ReadDB() IUserBlackListDo {
	return u.Clauses(dbresolver.Read)
}

func (u userBlackListDo) WriteDB() IUserBlackListDo {
	return u.Clauses(dbresolver.Write)
}

func (u userBlackListDo) Session(config *gorm.Session) IUserBlackListDo {
	return u.withDO(u.DO.Session(config))
}

func (u userBlackListDo) Clauses(conds ...clause.Expression) IUserBlackListDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userBlackListDo) Returning(value interface{}, columns ...string) IUserBlackListDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userBlackListDo) Not(conds ...gen.Condition) IUserBlackListDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userBlackListDo) Or(conds ...gen.Condition) IUserBlackListDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userBlackListDo) Select(conds ...field.Expr) IUserBlackListDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userBlackListDo) Where(conds ...gen.Condition) IUserBlackListDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userBlackListDo) Order(conds ...field.Expr) IUserBlackListDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userBlackListDo) Distinct(cols ...field.Expr) IUserBlackListDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userBlackListDo) Omit(cols ...field.Expr) IUserBlackListDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userBlackListDo) Join(table schema.Tabler, on ...field.Expr) IUserBlackListDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userBlackListDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserBlackListDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userBlackListDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserBlackListDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userBlackListDo) Group(cols ...field.Expr) IUserBlackListDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userBlackListDo) Having(conds ...gen.Condition) IUserBlackListDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userBlackListDo) Limit(limit int) IUserBlackListDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userBlackListDo) Offset(offset int) IUserBlackListDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userBlackListDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserBlackListDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userBlackListDo) Unscoped() IUserBlackListDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userBlackListDo) Create(values ...*model.UserBlackList) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userBlackListDo) CreateInBatches(values []*model.UserBlackList, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userBlackListDo) Save(values ...*model.UserBlackList) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userBlackListDo) First() (*model.UserBlackList, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBlackList), nil
	}
}

func (u userBlackListDo) Take() (*model.UserBlackList, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBlackList), nil
	}
}

func (u userBlackListDo) Last() (*model.UserBlackList, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBlackList), nil
	}
}

func (u userBlackListDo) Find() ([]*model.UserBlackList, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserBlackList), err
}

func (u userBlackListDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserBlackList, err error) {
	buf := make([]*model.UserBlackList, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userBlackListDo) FindInBatches(result *[]*model.UserBlackList, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userBlackListDo) Attrs(attrs ...field.AssignExpr) IUserBlackListDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userBlackListDo) Assign(attrs ...field.AssignExpr) IUserBlackListDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userBlackListDo) Joins(fields ...field.RelationField) IUserBlackListDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userBlackListDo) Preload(fields ...field.RelationField) IUserBlackListDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userBlackListDo) FirstOrInit() (*model.UserBlackList, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBlackList), nil
	}
}

func (u userBlackListDo) FirstOrCreate() (*model.UserBlackList, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBlackList), nil
	}
}

func (u userBlackListDo) FindByPage(offset int, limit int) (result []*model.UserBlackList, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userBlackListDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userBlackListDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userBlackListDo) Delete(models ...*model.UserBlackList) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userBlackListDo) withDO(do gen.Dao) *userBlackListDo {
	u.DO = *do.(*gen.DO)
	return u
}
