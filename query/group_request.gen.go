// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/adnpa/IM/model"
)

func newGroupRequest(db *gorm.DB, opts ...gen.DOOption) groupRequest {
	_groupRequest := groupRequest{}

	_groupRequest.groupRequestDo.UseDB(db, opts...)
	_groupRequest.groupRequestDo.UseModel(&model.GroupRequest{})

	tableName := _groupRequest.groupRequestDo.TableName()
	_groupRequest.ALL = field.NewAsterisk(tableName)
	_groupRequest.ID = field.NewInt32(tableName, "id")
	_groupRequest.GroupID = field.NewString(tableName, "group_id")
	_groupRequest.FromUserID = field.NewString(tableName, "from_user_id")
	_groupRequest.ToUserID = field.NewString(tableName, "to_user_id")
	_groupRequest.Flag = field.NewInt32(tableName, "flag")
	_groupRequest.ReqMsg = field.NewString(tableName, "req_msg")
	_groupRequest.HandledMsg = field.NewString(tableName, "handled_msg")
	_groupRequest.CreateTime = field.NewTime(tableName, "create_time")
	_groupRequest.FromUserNickname = field.NewString(tableName, "from_user_nickname")
	_groupRequest.ToUserNickname = field.NewString(tableName, "to_user_nickname")
	_groupRequest.FromUserFaceURL = field.NewString(tableName, "from_user_face_url")
	_groupRequest.ToUserFaceURL = field.NewString(tableName, "to_user_face_url")
	_groupRequest.HandledUser = field.NewString(tableName, "handled_user")

	_groupRequest.fillFieldMap()

	return _groupRequest
}

type groupRequest struct {
	groupRequestDo

	ALL              field.Asterisk
	ID               field.Int32
	GroupID          field.String
	FromUserID       field.String
	ToUserID         field.String
	Flag             field.Int32
	ReqMsg           field.String
	HandledMsg       field.String
	CreateTime       field.Time
	FromUserNickname field.String
	ToUserNickname   field.String
	FromUserFaceURL  field.String
	ToUserFaceURL    field.String
	HandledUser      field.String

	fieldMap map[string]field.Expr
}

func (g groupRequest) Table(newTableName string) *groupRequest {
	g.groupRequestDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g groupRequest) As(alias string) *groupRequest {
	g.groupRequestDo.DO = *(g.groupRequestDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *groupRequest) updateTableName(table string) *groupRequest {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt32(table, "id")
	g.GroupID = field.NewString(table, "group_id")
	g.FromUserID = field.NewString(table, "from_user_id")
	g.ToUserID = field.NewString(table, "to_user_id")
	g.Flag = field.NewInt32(table, "flag")
	g.ReqMsg = field.NewString(table, "req_msg")
	g.HandledMsg = field.NewString(table, "handled_msg")
	g.CreateTime = field.NewTime(table, "create_time")
	g.FromUserNickname = field.NewString(table, "from_user_nickname")
	g.ToUserNickname = field.NewString(table, "to_user_nickname")
	g.FromUserFaceURL = field.NewString(table, "from_user_face_url")
	g.ToUserFaceURL = field.NewString(table, "to_user_face_url")
	g.HandledUser = field.NewString(table, "handled_user")

	g.fillFieldMap()

	return g
}

func (g *groupRequest) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *groupRequest) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 13)
	g.fieldMap["id"] = g.ID
	g.fieldMap["group_id"] = g.GroupID
	g.fieldMap["from_user_id"] = g.FromUserID
	g.fieldMap["to_user_id"] = g.ToUserID
	g.fieldMap["flag"] = g.Flag
	g.fieldMap["req_msg"] = g.ReqMsg
	g.fieldMap["handled_msg"] = g.HandledMsg
	g.fieldMap["create_time"] = g.CreateTime
	g.fieldMap["from_user_nickname"] = g.FromUserNickname
	g.fieldMap["to_user_nickname"] = g.ToUserNickname
	g.fieldMap["from_user_face_url"] = g.FromUserFaceURL
	g.fieldMap["to_user_face_url"] = g.ToUserFaceURL
	g.fieldMap["handled_user"] = g.HandledUser
}

func (g groupRequest) clone(db *gorm.DB) groupRequest {
	g.groupRequestDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g groupRequest) replaceDB(db *gorm.DB) groupRequest {
	g.groupRequestDo.ReplaceDB(db)
	return g
}

type groupRequestDo struct{ gen.DO }

type IGroupRequestDo interface {
	gen.SubQuery
	Debug() IGroupRequestDo
	WithContext(ctx context.Context) IGroupRequestDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGroupRequestDo
	WriteDB() IGroupRequestDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGroupRequestDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGroupRequestDo
	Not(conds ...gen.Condition) IGroupRequestDo
	Or(conds ...gen.Condition) IGroupRequestDo
	Select(conds ...field.Expr) IGroupRequestDo
	Where(conds ...gen.Condition) IGroupRequestDo
	Order(conds ...field.Expr) IGroupRequestDo
	Distinct(cols ...field.Expr) IGroupRequestDo
	Omit(cols ...field.Expr) IGroupRequestDo
	Join(table schema.Tabler, on ...field.Expr) IGroupRequestDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGroupRequestDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGroupRequestDo
	Group(cols ...field.Expr) IGroupRequestDo
	Having(conds ...gen.Condition) IGroupRequestDo
	Limit(limit int) IGroupRequestDo
	Offset(offset int) IGroupRequestDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGroupRequestDo
	Unscoped() IGroupRequestDo
	Create(values ...*model.GroupRequest) error
	CreateInBatches(values []*model.GroupRequest, batchSize int) error
	Save(values ...*model.GroupRequest) error
	First() (*model.GroupRequest, error)
	Take() (*model.GroupRequest, error)
	Last() (*model.GroupRequest, error)
	Find() ([]*model.GroupRequest, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GroupRequest, err error)
	FindInBatches(result *[]*model.GroupRequest, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GroupRequest) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGroupRequestDo
	Assign(attrs ...field.AssignExpr) IGroupRequestDo
	Joins(fields ...field.RelationField) IGroupRequestDo
	Preload(fields ...field.RelationField) IGroupRequestDo
	FirstOrInit() (*model.GroupRequest, error)
	FirstOrCreate() (*model.GroupRequest, error)
	FindByPage(offset int, limit int) (result []*model.GroupRequest, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGroupRequestDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g groupRequestDo) Debug() IGroupRequestDo {
	return g.withDO(g.DO.Debug())
}

func (g groupRequestDo) WithContext(ctx context.Context) IGroupRequestDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g groupRequestDo) ReadDB() IGroupRequestDo {
	return g.Clauses(dbresolver.Read)
}

func (g groupRequestDo) WriteDB() IGroupRequestDo {
	return g.Clauses(dbresolver.Write)
}

func (g groupRequestDo) Session(config *gorm.Session) IGroupRequestDo {
	return g.withDO(g.DO.Session(config))
}

func (g groupRequestDo) Clauses(conds ...clause.Expression) IGroupRequestDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g groupRequestDo) Returning(value interface{}, columns ...string) IGroupRequestDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g groupRequestDo) Not(conds ...gen.Condition) IGroupRequestDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g groupRequestDo) Or(conds ...gen.Condition) IGroupRequestDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g groupRequestDo) Select(conds ...field.Expr) IGroupRequestDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g groupRequestDo) Where(conds ...gen.Condition) IGroupRequestDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g groupRequestDo) Order(conds ...field.Expr) IGroupRequestDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g groupRequestDo) Distinct(cols ...field.Expr) IGroupRequestDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g groupRequestDo) Omit(cols ...field.Expr) IGroupRequestDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g groupRequestDo) Join(table schema.Tabler, on ...field.Expr) IGroupRequestDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g groupRequestDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGroupRequestDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g groupRequestDo) RightJoin(table schema.Tabler, on ...field.Expr) IGroupRequestDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g groupRequestDo) Group(cols ...field.Expr) IGroupRequestDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g groupRequestDo) Having(conds ...gen.Condition) IGroupRequestDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g groupRequestDo) Limit(limit int) IGroupRequestDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g groupRequestDo) Offset(offset int) IGroupRequestDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g groupRequestDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGroupRequestDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g groupRequestDo) Unscoped() IGroupRequestDo {
	return g.withDO(g.DO.Unscoped())
}

func (g groupRequestDo) Create(values ...*model.GroupRequest) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g groupRequestDo) CreateInBatches(values []*model.GroupRequest, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g groupRequestDo) Save(values ...*model.GroupRequest) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g groupRequestDo) First() (*model.GroupRequest, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupRequest), nil
	}
}

func (g groupRequestDo) Take() (*model.GroupRequest, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupRequest), nil
	}
}

func (g groupRequestDo) Last() (*model.GroupRequest, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupRequest), nil
	}
}

func (g groupRequestDo) Find() ([]*model.GroupRequest, error) {
	result, err := g.DO.Find()
	return result.([]*model.GroupRequest), err
}

func (g groupRequestDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GroupRequest, err error) {
	buf := make([]*model.GroupRequest, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g groupRequestDo) FindInBatches(result *[]*model.GroupRequest, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g groupRequestDo) Attrs(attrs ...field.AssignExpr) IGroupRequestDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g groupRequestDo) Assign(attrs ...field.AssignExpr) IGroupRequestDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g groupRequestDo) Joins(fields ...field.RelationField) IGroupRequestDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g groupRequestDo) Preload(fields ...field.RelationField) IGroupRequestDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g groupRequestDo) FirstOrInit() (*model.GroupRequest, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupRequest), nil
	}
}

func (g groupRequestDo) FirstOrCreate() (*model.GroupRequest, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupRequest), nil
	}
}

func (g groupRequestDo) FindByPage(offset int, limit int) (result []*model.GroupRequest, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g groupRequestDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g groupRequestDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g groupRequestDo) Delete(models ...*model.GroupRequest) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *groupRequestDo) withDO(do gen.Dao) *groupRequestDo {
	g.DO = *do.(*gen.DO)
	return g
}
