# 单节点部署 用于原型测试
networks:
  #  front-tier:
  back-tier:

services:
  # --api service-----------------------------------------
  user-srv:
    build:
      context: .
      dockerfile: deployments/user/Dockerfile
    ports:
      - "50051:50051"
    networks:
      - back-tier
    volumes:
      - ./app/user/user-srv.yaml:/build/user-srv.yaml
    depends_on:
      - nacos
      - db
      - redis
      - badger

  friend-srv:
    build:
      context: .
      dockerfile: deployments/friend/Dockerfile
    ports:
      - "50053:50053"
    networks:
      - back-tier
    volumes:
      - ./app/friend/friend-srv.yaml:/build/friend-srv.yaml
    depends_on:
      - nacos
      - db
      - redis
      - badger

  oss-srv:
    build:
      context: .
      dockerfile: deployments/oss/Dockerfile
    ports:
      - "50057:50057"
    networks:
      - back-tier
    volumes:
      - ./app/oss/oss.yaml:/build/oss.yaml
    depends_on:
      - nacos
      - db
      - redis
      - badger

  # --chat service-----------------------------------------
  presence-srv:
    build:
      context: .
      dockerfile: deployments/presence/Dockerfile
    ports:
      - "50055:50055"
      - "50056:50056"
    networks:
      - back-tier
    volumes:
      - ./app/presence/presence-srv.yaml:/build/presence-srv.yaml
    depends_on:
      - nacos
      - db
      - redis
      - badger

  transfer-srv:
    build:
      context: .
      dockerfile: deployments/transfer/Dockerfile
    networks:
      - back-tier
    volumes:
      - ./app/transfer/transfer-srv.yaml:/build/transfer-srv.yaml
    depends_on:
      - nacos
      - db
      - redis
      - badger

  offline-srv:
    build:
      context: .
      dockerfile: deployments/offline/Dockerfile
    ports:
      - "50054:50054"
    networks:
      - back-tier
    volumes:
      - ./app/offline/offline-srv.yaml:/build/offline-srv.yaml
    depends_on:
      - nacos
      - db
      - redis
      - badger

  # --third party service-----------------------------------------
  badger:
    image: "consul:1.15.4"
    container_name: badger
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    command: agent -server -ui -node=server-1 -bootstrap-expect=1 -client=0.0.0.0
    restart: always
    networks:
      - back-tier

  db:
    image: mysql
    restart: always
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: example
    networks:
      - back-tier

  mongo:
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 123456
    networks:
      - back-tier

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: 123456
      ME_CONFIG_MONGODB_URL: mongodb://root:123456@mongo:27017/
      ME_CONFIG_BASICAUTH: false
    networks:
      - back-tier

  redis:
    image: "redis"
    restart: always
    ports:
      - "6379:6379"
    networks:
      - back-tier

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ./rabbitmq_data:/var/lib/rabbitmq # 数据持久化
    environment:
      RABBITMQ_DEFAULT_USER: admin # 默认用户名
      RABBITMQ_DEFAULT_PASS: password # 默认密码
    restart: always # 容器退出时自动重启
    networks:
      - back-tier

  nacos:
    image: nacos/nacos-server:2.0.2
    # restart: always
    container_name: nacos-standalone
    environment:
      - PREFER_HOST_MODE=hostname
      - MODE=standalone
      - NACOS_AUTH_IDENTITY_KEY=serverIdentity
      - NACOS_AUTH_IDENTITY_VALUE=security
      - NACOS_AUTH_TOKEN=SecretKey012345678901234567890123456789012345678901234567890123456789
    volumes:
      - ./logs/nacos/standalone-logs/:/home/nacos/logs
    ports:
      - "8848:8848"
      - "9848:9848"
    networks:
      - back-tier

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    volumes:
      - ./config/prometheus-standalone.yaml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - nacos
    # restart: on-failure
    restart: always
    networks:
      - back-tier

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    ports:
      - 3000:3000
    # restart: on-failure
    restart: always
    networks:
      - back-tier
