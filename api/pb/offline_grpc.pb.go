// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: offline.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Offline_GetOfflineMsg_FullMethodName = "/Offline/GetOfflineMsg"
	Offline_PutMsg_FullMethodName        = "/Offline/PutMsg"
	Offline_RemoveMsg_FullMethodName     = "/Offline/RemoveMsg"
)

// OfflineClient is the client API for Offline service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OfflineClient interface {
	GetOfflineMsg(ctx context.Context, in *GetOfflineMsgReq, opts ...grpc.CallOption) (*GetOfflineMsgResp, error)
	PutMsg(ctx context.Context, in *PutMsgReq, opts ...grpc.CallOption) (*PutMsgResp, error)
	RemoveMsg(ctx context.Context, in *RemoveMsgReq, opts ...grpc.CallOption) (*RemoveMsgResp, error)
}

type offlineClient struct {
	cc grpc.ClientConnInterface
}

func NewOfflineClient(cc grpc.ClientConnInterface) OfflineClient {
	return &offlineClient{cc}
}

func (c *offlineClient) GetOfflineMsg(ctx context.Context, in *GetOfflineMsgReq, opts ...grpc.CallOption) (*GetOfflineMsgResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOfflineMsgResp)
	err := c.cc.Invoke(ctx, Offline_GetOfflineMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offlineClient) PutMsg(ctx context.Context, in *PutMsgReq, opts ...grpc.CallOption) (*PutMsgResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutMsgResp)
	err := c.cc.Invoke(ctx, Offline_PutMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offlineClient) RemoveMsg(ctx context.Context, in *RemoveMsgReq, opts ...grpc.CallOption) (*RemoveMsgResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveMsgResp)
	err := c.cc.Invoke(ctx, Offline_RemoveMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OfflineServer is the server API for Offline service.
// All implementations must embed UnimplementedOfflineServer
// for forward compatibility.
type OfflineServer interface {
	GetOfflineMsg(context.Context, *GetOfflineMsgReq) (*GetOfflineMsgResp, error)
	PutMsg(context.Context, *PutMsgReq) (*PutMsgResp, error)
	RemoveMsg(context.Context, *RemoveMsgReq) (*RemoveMsgResp, error)
	mustEmbedUnimplementedOfflineServer()
}

// UnimplementedOfflineServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOfflineServer struct{}

func (UnimplementedOfflineServer) GetOfflineMsg(context.Context, *GetOfflineMsgReq) (*GetOfflineMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOfflineMsg not implemented")
}
func (UnimplementedOfflineServer) PutMsg(context.Context, *PutMsgReq) (*PutMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutMsg not implemented")
}
func (UnimplementedOfflineServer) RemoveMsg(context.Context, *RemoveMsgReq) (*RemoveMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMsg not implemented")
}
func (UnimplementedOfflineServer) mustEmbedUnimplementedOfflineServer() {}
func (UnimplementedOfflineServer) testEmbeddedByValue()                 {}

// UnsafeOfflineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OfflineServer will
// result in compilation errors.
type UnsafeOfflineServer interface {
	mustEmbedUnimplementedOfflineServer()
}

func RegisterOfflineServer(s grpc.ServiceRegistrar, srv OfflineServer) {
	// If the following call pancis, it indicates UnimplementedOfflineServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Offline_ServiceDesc, srv)
}

func _Offline_GetOfflineMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOfflineMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfflineServer).GetOfflineMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Offline_GetOfflineMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfflineServer).GetOfflineMsg(ctx, req.(*GetOfflineMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Offline_PutMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfflineServer).PutMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Offline_PutMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfflineServer).PutMsg(ctx, req.(*PutMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Offline_RemoveMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfflineServer).RemoveMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Offline_RemoveMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfflineServer).RemoveMsg(ctx, req.(*RemoveMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Offline_ServiceDesc is the grpc.ServiceDesc for Offline service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Offline_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Offline",
	HandlerType: (*OfflineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOfflineMsg",
			Handler:    _Offline_GetOfflineMsg_Handler,
		},
		{
			MethodName: "PutMsg",
			Handler:    _Offline_PutMsg_Handler,
		},
		{
			MethodName: "RemoveMsg",
			Handler:    _Offline_RemoveMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "offline.proto",
}
