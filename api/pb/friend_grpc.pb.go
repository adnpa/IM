// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: friend.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Friend_GetFriendsById_FullMethodName      = "/Friend/GetFriendsById"
	Friend_CreateFriend_FullMethodName        = "/Friend/CreateFriend"
	Friend_DeleteFriend_FullMethodName        = "/Friend/DeleteFriend"
	Friend_UpdateFriend_FullMethodName        = "/Friend/UpdateFriend"
	Friend_GetFriendApplyById_FullMethodName  = "/Friend/GetFriendApplyById"
	Friend_GetFriendApplyByIds_FullMethodName = "/Friend/GetFriendApplyByIds"
	Friend_CreateFriendApply_FullMethodName   = "/Friend/CreateFriendApply"
	Friend_UpdateFriendApply_FullMethodName   = "/Friend/UpdateFriendApply"
	Friend_DeleteFriendApply_FullMethodName   = "/Friend/DeleteFriendApply"
)

// FriendClient is the client API for Friend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FriendClient interface {
	GetFriendsById(ctx context.Context, in *GetFriendsByIdReq, opts ...grpc.CallOption) (*GetFriendsByIdResp, error)
	CreateFriend(ctx context.Context, in *CreateFriendReq, opts ...grpc.CallOption) (*CreateFriendResp, error)
	DeleteFriend(ctx context.Context, in *DeleteFriendReq, opts ...grpc.CallOption) (*DeleteFriendResp, error)
	UpdateFriend(ctx context.Context, in *UpdateFriendReq, opts ...grpc.CallOption) (*UpdateFriendResp, error)
	GetFriendApplyById(ctx context.Context, in *GetFriendApplyByIdReq, opts ...grpc.CallOption) (*GetFriendApplyByIdResp, error)
	GetFriendApplyByIds(ctx context.Context, in *GetFriendApplyByIdsReq, opts ...grpc.CallOption) (*GetFriendApplyByIdsResp, error)
	CreateFriendApply(ctx context.Context, in *CreateFriendApplyReq, opts ...grpc.CallOption) (*CreateFriendApplyResp, error)
	UpdateFriendApply(ctx context.Context, in *UpdateFriendApplyReq, opts ...grpc.CallOption) (*UpdateFriendApplyResp, error)
	DeleteFriendApply(ctx context.Context, in *DeleteFriendApplyReq, opts ...grpc.CallOption) (*DeleteFriendApplyResp, error)
}

type friendClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendClient(cc grpc.ClientConnInterface) FriendClient {
	return &friendClient{cc}
}

func (c *friendClient) GetFriendsById(ctx context.Context, in *GetFriendsByIdReq, opts ...grpc.CallOption) (*GetFriendsByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFriendsByIdResp)
	err := c.cc.Invoke(ctx, Friend_GetFriendsById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) CreateFriend(ctx context.Context, in *CreateFriendReq, opts ...grpc.CallOption) (*CreateFriendResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFriendResp)
	err := c.cc.Invoke(ctx, Friend_CreateFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) DeleteFriend(ctx context.Context, in *DeleteFriendReq, opts ...grpc.CallOption) (*DeleteFriendResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFriendResp)
	err := c.cc.Invoke(ctx, Friend_DeleteFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) UpdateFriend(ctx context.Context, in *UpdateFriendReq, opts ...grpc.CallOption) (*UpdateFriendResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFriendResp)
	err := c.cc.Invoke(ctx, Friend_UpdateFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) GetFriendApplyById(ctx context.Context, in *GetFriendApplyByIdReq, opts ...grpc.CallOption) (*GetFriendApplyByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFriendApplyByIdResp)
	err := c.cc.Invoke(ctx, Friend_GetFriendApplyById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) GetFriendApplyByIds(ctx context.Context, in *GetFriendApplyByIdsReq, opts ...grpc.CallOption) (*GetFriendApplyByIdsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFriendApplyByIdsResp)
	err := c.cc.Invoke(ctx, Friend_GetFriendApplyByIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) CreateFriendApply(ctx context.Context, in *CreateFriendApplyReq, opts ...grpc.CallOption) (*CreateFriendApplyResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFriendApplyResp)
	err := c.cc.Invoke(ctx, Friend_CreateFriendApply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) UpdateFriendApply(ctx context.Context, in *UpdateFriendApplyReq, opts ...grpc.CallOption) (*UpdateFriendApplyResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFriendApplyResp)
	err := c.cc.Invoke(ctx, Friend_UpdateFriendApply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) DeleteFriendApply(ctx context.Context, in *DeleteFriendApplyReq, opts ...grpc.CallOption) (*DeleteFriendApplyResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFriendApplyResp)
	err := c.cc.Invoke(ctx, Friend_DeleteFriendApply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendServer is the server API for Friend service.
// All implementations must embed UnimplementedFriendServer
// for forward compatibility.
type FriendServer interface {
	GetFriendsById(context.Context, *GetFriendsByIdReq) (*GetFriendsByIdResp, error)
	CreateFriend(context.Context, *CreateFriendReq) (*CreateFriendResp, error)
	DeleteFriend(context.Context, *DeleteFriendReq) (*DeleteFriendResp, error)
	UpdateFriend(context.Context, *UpdateFriendReq) (*UpdateFriendResp, error)
	GetFriendApplyById(context.Context, *GetFriendApplyByIdReq) (*GetFriendApplyByIdResp, error)
	GetFriendApplyByIds(context.Context, *GetFriendApplyByIdsReq) (*GetFriendApplyByIdsResp, error)
	CreateFriendApply(context.Context, *CreateFriendApplyReq) (*CreateFriendApplyResp, error)
	UpdateFriendApply(context.Context, *UpdateFriendApplyReq) (*UpdateFriendApplyResp, error)
	DeleteFriendApply(context.Context, *DeleteFriendApplyReq) (*DeleteFriendApplyResp, error)
	mustEmbedUnimplementedFriendServer()
}

// UnimplementedFriendServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFriendServer struct{}

func (UnimplementedFriendServer) GetFriendsById(context.Context, *GetFriendsByIdReq) (*GetFriendsByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendsById not implemented")
}
func (UnimplementedFriendServer) CreateFriend(context.Context, *CreateFriendReq) (*CreateFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFriend not implemented")
}
func (UnimplementedFriendServer) DeleteFriend(context.Context, *DeleteFriendReq) (*DeleteFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFriend not implemented")
}
func (UnimplementedFriendServer) UpdateFriend(context.Context, *UpdateFriendReq) (*UpdateFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFriend not implemented")
}
func (UnimplementedFriendServer) GetFriendApplyById(context.Context, *GetFriendApplyByIdReq) (*GetFriendApplyByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendApplyById not implemented")
}
func (UnimplementedFriendServer) GetFriendApplyByIds(context.Context, *GetFriendApplyByIdsReq) (*GetFriendApplyByIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendApplyByIds not implemented")
}
func (UnimplementedFriendServer) CreateFriendApply(context.Context, *CreateFriendApplyReq) (*CreateFriendApplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFriendApply not implemented")
}
func (UnimplementedFriendServer) UpdateFriendApply(context.Context, *UpdateFriendApplyReq) (*UpdateFriendApplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFriendApply not implemented")
}
func (UnimplementedFriendServer) DeleteFriendApply(context.Context, *DeleteFriendApplyReq) (*DeleteFriendApplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFriendApply not implemented")
}
func (UnimplementedFriendServer) mustEmbedUnimplementedFriendServer() {}
func (UnimplementedFriendServer) testEmbeddedByValue()                {}

// UnsafeFriendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendServer will
// result in compilation errors.
type UnsafeFriendServer interface {
	mustEmbedUnimplementedFriendServer()
}

func RegisterFriendServer(s grpc.ServiceRegistrar, srv FriendServer) {
	// If the following call pancis, it indicates UnimplementedFriendServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Friend_ServiceDesc, srv)
}

func _Friend_GetFriendsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendsByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).GetFriendsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_GetFriendsById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).GetFriendsById(ctx, req.(*GetFriendsByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_CreateFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).CreateFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_CreateFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).CreateFriend(ctx, req.(*CreateFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_DeleteFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).DeleteFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_DeleteFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).DeleteFriend(ctx, req.(*DeleteFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_UpdateFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).UpdateFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_UpdateFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).UpdateFriend(ctx, req.(*UpdateFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_GetFriendApplyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendApplyByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).GetFriendApplyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_GetFriendApplyById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).GetFriendApplyById(ctx, req.(*GetFriendApplyByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_GetFriendApplyByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendApplyByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).GetFriendApplyByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_GetFriendApplyByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).GetFriendApplyByIds(ctx, req.(*GetFriendApplyByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_CreateFriendApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFriendApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).CreateFriendApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_CreateFriendApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).CreateFriendApply(ctx, req.(*CreateFriendApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_UpdateFriendApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFriendApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).UpdateFriendApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_UpdateFriendApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).UpdateFriendApply(ctx, req.(*UpdateFriendApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_DeleteFriendApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFriendApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).DeleteFriendApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_DeleteFriendApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).DeleteFriendApply(ctx, req.(*DeleteFriendApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Friend_ServiceDesc is the grpc.ServiceDesc for Friend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Friend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Friend",
	HandlerType: (*FriendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFriendsById",
			Handler:    _Friend_GetFriendsById_Handler,
		},
		{
			MethodName: "CreateFriend",
			Handler:    _Friend_CreateFriend_Handler,
		},
		{
			MethodName: "DeleteFriend",
			Handler:    _Friend_DeleteFriend_Handler,
		},
		{
			MethodName: "UpdateFriend",
			Handler:    _Friend_UpdateFriend_Handler,
		},
		{
			MethodName: "GetFriendApplyById",
			Handler:    _Friend_GetFriendApplyById_Handler,
		},
		{
			MethodName: "GetFriendApplyByIds",
			Handler:    _Friend_GetFriendApplyByIds_Handler,
		},
		{
			MethodName: "CreateFriendApply",
			Handler:    _Friend_CreateFriendApply_Handler,
		},
		{
			MethodName: "UpdateFriendApply",
			Handler:    _Friend_UpdateFriendApply_Handler,
		},
		{
			MethodName: "DeleteFriendApply",
			Handler:    _Friend_DeleteFriendApply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "friend.proto",
}
